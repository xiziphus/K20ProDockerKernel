#!/usr/bin/env python3
"""
Main configuration manager for Docker-enabled kernel build system.
Coordinates configuration parsing, validation, and management.
"""

import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple

from .kernel_config import KernelConfigParser, DockerRequirements, BuildSettings, CgroupConfig
from .validator import KernelConfigValidator, CgroupValidator, ValidationResult
from kernel_build.utils.file_utils import ensure_directory, backup_file


class ConfigurationManager:
    """Main configuration manager for the kernel build system."""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.kernel_parser = KernelConfigParser()
        self.build_settings = BuildSettings()
        self.cgroup_config = CgroupConfig()
        self.kernel_validator = KernelConfigValidator()
        self.cgroup_validator = CgroupValidator()
        
        # Ensure required directories exist
        self._setup_directories()
        
    def _setup_directories(self) -> None:
        """Setup required directory structure."""
        directories = [
            'kernel_build/config',
            'kernel_build/scripts', 
            'kernel_build/utils',
            'kernel_build/tests',
            'kernel_build/output',
            'kernel_build/logs'
        ]
        
        for directory in directories:
            ensure_directory(self.project_root / directory)
            
    def load_kernel_config(self, defconfig_path: str) -> Dict[str, str]:
        """
        Load and parse kernel configuration.
        
        Args:
            defconfig_path: Path to kernel defconfig file
            
        Returns:
            Dictionary of configuration options
        """
        return self.kernel_parser.parse_defconfig(defconfig_path)
        
    def load_build_settings(self, settings_file: Optional[str] = None) -> None:
        """
        Load build settings from file.
        
        Args:
            settings_file: Path to build settings JSON file
        """
        if settings_file:
            self.build_settings.load_from_file(settings_file)
            
    def load_cgroup_config(self, cgroups_json_path: str) -> Dict:
        """
        Load and parse cgroup configuration.
        
        Args:
            cgroups_json_path: Path to cgroups.json file
            
        Returns:
            Cgroup configuration dictionary
        """
        return self.cgroup_config.parse_cgroups_json(cgroups_json_path)
        
    def validate_configuration(self) -> Tuple[bool, str]:
        """
        Validate all configurations against Docker requirements.
        
        Returns:
            Tuple of (is_valid, validation_report)
        """
        # Validate kernel configuration
        kernel_results = self.kernel_validator.validate_config(self.kernel_parser)
        
        # Validate cgroup configuration
        cgroup_results = self.cgroup_validator.validate_cgroup_config(self.cgroup_config)
        
        # Generate combined report
        report_lines = []
        report_lines.append(self.kernel_validator.generate_report())
        report_lines.append("\n" + "="*50 + "\n")
        report_lines.append(self.cgroup_validator.generate_report())
        
        # Check if configuration is valid
        has_kernel_errors = self.kernel_validator.has_errors()
        has_cgroup_errors = len([r for r in cgroup_results if r.level.value == "error"]) > 0
        
        is_valid = not (has_kernel_errors or has_cgroup_errors)
        
        return is_valid, "\n".join(report_lines)
        
    def generate_docker_config(self, output_path: str) -> bool:
        """
        Generate a kernel configuration with Docker requirements applied.
        
        Args:
            output_path: Path to write the new configuration
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Start with current configuration
            config_options = self.kernel_parser.config_options.copy()
            
            # Apply Docker requirements
            docker_requirements = DockerRequirements.get_all_requirements()
            config_options.update(docker_requirements)
            
            # Write new configuration
            with open(output_path, 'w') as f:
                f.write("# Docker-enabled kernel configuration\n")
                f.write("# Generated by Docker Kernel Build System\n\n")
                
                for option, value in sorted(config_options.items()):
                    if value == 'n':
                        f.write(f"# {option} is not set\n")
                    else:
                        f.write(f"{option}={value}\n")
                        
            return True
            
        except Exception as e:
            print(f"Error generating Docker config: {e}")
            return False
            
    def create_build_config(self, output_path: str) -> bool:
        """
        Create a build configuration file with current settings.
        
        Args:
            output_path: Path to write build configuration
            
        Returns:
            True if successful, False otherwise
        """
        try:
            self.build_settings.save_to_file(output_path)
            return True
        except Exception as e:
            print(f"Error creating build config: {e}")
            return False
            
    def get_missing_requirements(self) -> List[str]:
        """
        Get list of missing Docker requirements.
        
        Returns:
            List of missing configuration options
        """
        missing = []
        docker_requirements = DockerRequirements.get_all_requirements()
        
        for option, expected_value in docker_requirements.items():
            actual_value = self.kernel_parser.get_option(option)
            if actual_value != expected_value:
                missing.append(f"{option}={expected_value}")
                
        return missing
        
    def get_configuration_summary(self) -> Dict:
        """
        Get a summary of current configuration status.
        
        Returns:
            Dictionary with configuration summary
        """
        docker_requirements = DockerRequirements.get_all_requirements()
        total_requirements = len(docker_requirements)
        
        satisfied_count = 0
        for option, expected_value in docker_requirements.items():
            actual_value = self.kernel_parser.get_option(option)
            if actual_value == expected_value:
                satisfied_count += 1
                
        cgroup_controllers = self.cgroup_config.get_cgroup_controllers()
        is_cgroup_valid, missing_cgroups = self.cgroup_config.validate_docker_cgroups()
        
        return {
            'kernel_config_loaded': len(self.kernel_parser.config_options) > 0,
            'total_docker_requirements': total_requirements,
            'satisfied_requirements': satisfied_count,
            'satisfaction_percentage': (satisfied_count / total_requirements) * 100 if total_requirements > 0 else 0,
            'cgroup_controllers_count': len(cgroup_controllers),
            'cgroup_config_valid': is_cgroup_valid,
            'missing_cgroup_controllers': missing_cgroups,
            'build_settings': dict(self.build_settings.settings)
        }
        
    def export_configuration(self, export_dir: str) -> bool:
        """
        Export all configuration files to a directory.
        
        Args:
            export_dir: Directory to export configurations to
            
        Returns:
            True if successful, False otherwise
        """
        try:
            export_path = Path(export_dir)
            ensure_directory(export_path)
            
            # Export Docker-enabled kernel config
            docker_config_path = export_path / "docker_defconfig"
            self.generate_docker_config(str(docker_config_path))
            
            # Export build settings
            build_config_path = export_path / "build_settings.json"
            self.create_build_config(str(build_config_path))
            
            # Export validation report
            is_valid, report = self.validate_configuration()
            report_path = export_path / "validation_report.txt"
            with open(report_path, 'w') as f:
                f.write(report)
                
            # Export configuration summary
            summary = self.get_configuration_summary()
            summary_path = export_path / "config_summary.json"
            with open(summary_path, 'w') as f:
                json.dump(summary, f, indent=2)
                
            return True
            
        except Exception as e:
            print(f"Error exporting configuration: {e}")
            return False